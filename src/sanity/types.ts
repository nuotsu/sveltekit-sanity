/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
	_type: 'sanity.imagePaletteSwatch'
	background?: string
	foreground?: string
	population?: number
	title?: string
}

export type SanityImagePalette = {
	_type: 'sanity.imagePalette'
	darkMuted?: SanityImagePaletteSwatch
	lightVibrant?: SanityImagePaletteSwatch
	darkVibrant?: SanityImagePaletteSwatch
	vibrant?: SanityImagePaletteSwatch
	dominant?: SanityImagePaletteSwatch
	lightMuted?: SanityImagePaletteSwatch
	muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
	_type: 'sanity.imageDimensions'
	height?: number
	width?: number
	aspectRatio?: number
}

export type SanityFileAsset = {
	_id: string
	_type: 'sanity.fileAsset'
	_createdAt: string
	_updatedAt: string
	_rev: string
	originalFilename?: string
	label?: string
	title?: string
	description?: string
	altText?: string
	sha1hash?: string
	extension?: string
	mimeType?: string
	size?: number
	assetId?: string
	uploadId?: string
	path?: string
	url?: string
	source?: SanityAssetSourceData
}

export type Geopoint = {
	_type: 'geopoint'
	lat?: number
	lng?: number
	alt?: number
}

export type Prose = {
	_type: 'prose'
	content?: Array<{
		children?: Array<{
			marks?: Array<string>
			text?: string
			_type: 'span'
			_key: string
		}>
		style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
		listItem?: 'bullet' | 'number'
		markDefs?: Array<{
			href?: string
			_type: 'link'
			_key: string
		}>
		level?: number
		_type: 'block'
		_key: string
	}>
	tableOfContents?: boolean
	tocPosition?: 'left' | 'right'
}

export type Slug = {
	_type: 'slug'
	current?: string
	source?: string
}

export type LinkList = {
	_type: 'link.list'
	link?: Link
	links?: Array<
		{
			_key: string
		} & Link
	>
}

export type Link = {
	_type: 'link'
	label?: string
	type?: 'internal' | 'external'
	internal?: {
		_ref: string
		_type: 'reference'
		_weak?: boolean
		[internalGroqTypeReferenceTo]?: 'page'
	}
	external?: string
	params?: string
}

export type Page = {
	_id: string
	_type: 'page'
	_createdAt: string
	_updatedAt: string
	_rev: string
	title?: string
	modules?: Array<
		{
			_key: string
		} & Prose
	>
	metadata?: Metadata
}

export type SanityImageCrop = {
	_type: 'sanity.imageCrop'
	top?: number
	bottom?: number
	left?: number
	right?: number
}

export type SanityImageHotspot = {
	_type: 'sanity.imageHotspot'
	x?: number
	y?: number
	height?: number
	width?: number
}

export type SanityImageAsset = {
	_id: string
	_type: 'sanity.imageAsset'
	_createdAt: string
	_updatedAt: string
	_rev: string
	originalFilename?: string
	label?: string
	title?: string
	description?: string
	altText?: string
	sha1hash?: string
	extension?: string
	mimeType?: string
	size?: number
	assetId?: string
	uploadId?: string
	path?: string
	url?: string
	metadata?: SanityImageMetadata
	source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
	_type: 'sanity.assetSourceData'
	name?: string
	id?: string
	url?: string
}

export type SanityImageMetadata = {
	_type: 'sanity.imageMetadata'
	location?: Geopoint
	dimensions?: SanityImageDimensions
	palette?: SanityImagePalette
	lqip?: string
	blurHash?: string
	hasAlpha?: boolean
	isOpaque?: boolean
}

export type Metadata = {
	_type: 'metadata'
	slug?: Slug
	title?: string
	description?: string
	image?: {
		asset?: {
			_ref: string
			_type: 'reference'
			_weak?: boolean
			[internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
		}
		media?: unknown
		hotspot?: SanityImageHotspot
		crop?: SanityImageCrop
		_type: 'image'
	}
	noIndex?: boolean
}

export type Site = {
	_id: string
	_type: 'site'
	_createdAt: string
	_updatedAt: string
	_rev: string
	title?: string
	headerMenu?: {
		_ref: string
		_type: 'reference'
		_weak?: boolean
		[internalGroqTypeReferenceTo]?: 'navigation'
	}
	footerMenu?: {
		_ref: string
		_type: 'reference'
		_weak?: boolean
		[internalGroqTypeReferenceTo]?: 'navigation'
	}
}

export type Navigation = {
	_id: string
	_type: 'navigation'
	_createdAt: string
	_updatedAt: string
	_rev: string
	title?: string
	items?: Array<
		| ({
				_key: string
		  } & Link)
		| ({
				_key: string
		  } & LinkList)
	>
}

export type AllSanitySchemaTypes =
	| SanityImagePaletteSwatch
	| SanityImagePalette
	| SanityImageDimensions
	| SanityFileAsset
	| Geopoint
	| Prose
	| Slug
	| LinkList
	| Link
	| Page
	| SanityImageCrop
	| SanityImageHotspot
	| SanityImageAsset
	| SanityAssetSourceData
	| SanityImageMetadata
	| Metadata
	| Site
	| Navigation
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ./src/routes/(frontend)/+layout.server.ts
// Variable: SITE_QUERY
// Query: *[_type == 'site'][0]{		...,		headerMenu->{ 	...,	items[]{		...,		internal->{ title, metadata }	} },		footerMenu->{ 	...,	items[]{		...,		internal->{ title, metadata }	} },	}
export type SITE_QUERYResult = {
	_id: string
	_type: 'site'
	_createdAt: string
	_updatedAt: string
	_rev: string
	title?: string
	headerMenu: {
		_id: string
		_type: 'navigation'
		_createdAt: string
		_updatedAt: string
		_rev: string
		title?: string
		items: Array<
			| {
					_key: string
					_type: 'link.list'
					link?: Link
					links?: Array<
						{
							_key: string
						} & Link
					>
					internal: null
			  }
			| {
					_key: string
					_type: 'link'
					label?: string
					type?: 'external' | 'internal'
					internal: {
						title: string | null
						metadata: Metadata | null
					} | null
					external?: string
					params?: string
			  }
		> | null
	} | null
	footerMenu: {
		_id: string
		_type: 'navigation'
		_createdAt: string
		_updatedAt: string
		_rev: string
		title?: string
		items: Array<
			| {
					_key: string
					_type: 'link.list'
					link?: Link
					links?: Array<
						{
							_key: string
						} & Link
					>
					internal: null
			  }
			| {
					_key: string
					_type: 'link'
					label?: string
					type?: 'external' | 'internal'
					internal: {
						title: string | null
						metadata: Metadata | null
					} | null
					external?: string
					params?: string
			  }
		> | null
	} | null
} | null

// Source: ./src/routes/(frontend)/[...slug]/+page.server.ts
// Variable: PAGE_QUERY
// Query: *[_type == 'page' && metadata.slug.current == $slug][0]{		...,		modules[]{			...,			_type == 'prose' => {				'headings': select(tableOfContents => content[style in ['h2', 'h3', 'h4', 'h5', 'h6']]{					style,					'text': pt::text(@)				})			}		}	}
export type PAGE_QUERYResult = {
	_id: string
	_type: 'page'
	_createdAt: string
	_updatedAt: string
	_rev: string
	title?: string
	modules: Array<{
		_key: string
		_type: 'prose'
		content?: Array<{
			children?: Array<{
				marks?: Array<string>
				text?: string
				_type: 'span'
				_key: string
			}>
			style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
			listItem?: 'bullet' | 'number'
			markDefs?: Array<{
				href?: string
				_type: 'link'
				_key: string
			}>
			level?: number
			_type: 'block'
			_key: string
		}>
		tableOfContents?: boolean
		tocPosition?: 'left' | 'right'
		headings: Array<{
			style: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal' | null
			text: string
		}> | null
	}> | null
	metadata?: Metadata
} | null
// Variable: PAGE_404_QUERY
// Query: *[_type == 'page' && metadata.slug.current == '404'][0]
export type PAGE_404_QUERYResult = {
	_id: string
	_type: 'page'
	_createdAt: string
	_updatedAt: string
	_rev: string
	title?: string
	modules?: Array<
		{
			_key: string
		} & Prose
	>
	metadata?: Metadata
} | null

// Query TypeMap
import '@sanity/client'
declare module '@sanity/client' {
	interface SanityQueries {
		"*[_type == 'site'][0]{\n\t\t...,\n\t\theaderMenu->{ \n\t...,\n\titems[]{\n\t\t...,\n\t\tinternal->{ title, metadata }\n\t}\n },\n\t\tfooterMenu->{ \n\t...,\n\titems[]{\n\t\t...,\n\t\tinternal->{ title, metadata }\n\t}\n },\n\t}": SITE_QUERYResult
		"*[_type == 'page' && metadata.slug.current == $slug][0]{\n\t\t...,\n\t\tmodules[]{\n\t\t\t...,\n\t\t\t_type == 'prose' => {\n\t\t\t\t'headings': select(tableOfContents => content[style in ['h2', 'h3', 'h4', 'h5', 'h6']]{\n\t\t\t\t\tstyle,\n\t\t\t\t\t'text': pt::text(@)\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}": PAGE_QUERYResult
		"*[_type == 'page' && metadata.slug.current == '404'][0]": PAGE_404_QUERYResult
	}
}
